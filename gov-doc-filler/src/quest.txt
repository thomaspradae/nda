import React, { useState } from 'react';
import './App.css';

const sections = {
  personalInfo: [
    {
      groups: [
        {
          questions: [
            {
              title: 'Name',
              subtitle: '(First, Middle, Last, Suffix)',
              layout: '50%',
              help: 'Please provide your full legal name as it appears on your government ID.'
            },
            {
              title: 'Alternate Names',
              subtitle: '(First, Middle, Last, Suffix) - List any names by which you are known or any names under which credit was previously received',
              layout: '50%',
            },
          ],
        },
        {
          questions: [
            {
              title: 'Date of Birth',
              subtitle: '(mm-dd-yyyy)',
              layout: '50%',
            },
            {
              title: 'Social Security Number',
              subtitle: '(or Individual Taxpayer Identification Number)',
              layout: '50%',
            },
          ],
        },
        {
          questions: [
            {
              title: 'Marital Status',
              layout: '25%',
            },
            {
              title: 'Dependents',
              layout: '25%',
            },
          ],
        },
        {
          questions: [
            {
              title: 'Street',
              layout: '75%',
            },
            {
              title: '# Unit',
              layout: '25%',
            },
          ],
        },
        {
          questions: [
            {
              title: 'City',
              layout: '33%',
            },
            {
              title: 'State',
              layout: '33%',
            },
            {
              title: 'ZIP Code',
              layout: '33%',
            },
          ],
        },
      ],
    },
    {
      title: 'Contact Information',
      groups: [
        {
          questions: [
            {
              title: 'Email',
              layout: '100%',
            },
          ],
        },
      ],
    },
  ],
  // ... other sections
};

const sectionTitles = {
  personalInfo: 'Personal Information',
  // ... other section titles
};

function App() {
  const sectionNames = Object.keys(sections);
  const totalSections = sectionNames.length;
  const [currentSection, setCurrentSection] = useState(0);
  const [currentSubPage, setCurrentSubPage] = useState(0);
  const [progress, setProgress] = useState(0);
  const [formData, setFormData] = useState({});
  const [answeredQuestions, setAnsweredQuestions] = useState(new Set());
  const [sidebarVisible, setSidebarVisible] = useState(true);

  // State to track which question's help is visible
  const [isHelpVisible, setIsHelpVisible] = useState({});

  const toggleHelp = (index) => {
    setIsHelpVisible((prev) => ({
      ...prev,
      [index]: !prev[index], // Toggle the visibility of help text for the specific question
    }));
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
  
    // For SSN parts, allow only digits and set specific lengths
    if (name.startsWith("ssn-part")) {
      const regex = /^[0-9]*$/;
      if (!regex.test(value)) return; // Prevents entering non-numeric characters
    }
  
    // Ensure max length for each SSN part
    if (name === 'ssn-part1' && value.length > 3) return;
    if (name === 'ssn-part2' && value.length > 2) return;
    if (name === 'ssn-part3' && value.length > 4) return;
  
    setFormData({
      ...formData,
      [name]: value,
    });
  };
  
  const handleNextSubPage = () => {
    const totalSubPages = sections[sectionNames[currentSection]].length;
    const questionKey = ${currentSection}-${currentSubPage};

    if (formData[sections[sectionNames[currentSection]][currentSubPage].title] && !answeredQuestions.has(questionKey)) {
      setAnsweredQuestions(new Set([...answeredQuestions, questionKey]));
    }

    if (currentSubPage < totalSubPages - 1) {
      setCurrentSubPage(currentSubPage + 1);
    } else if (currentSection < totalSections - 1) {
      setCurrentSection(currentSection + 1);
      setCurrentSubPage(0);
    }

    updateProgress();
  };

  const handlePreviousSubPage = () => {
    if (currentSubPage > 0) {
      setCurrentSubPage(currentSubPage - 1);
    } else if (currentSection > 0) {
      const previousSection = currentSection - 1;
      setCurrentSection(previousSection);
      setCurrentSubPage(sections[sectionNames[previousSection]].length - 1);
    }
  };

  const updateProgress = () => {
    const totalQuestions = sectionNames.reduce((sum, section) => 
      sum + sections[section].reduce((subSum, subpage) => 
        subSum + subpage.groups.reduce((groupSum, group) => 
          groupSum + group.questions.length, 0), 0), 0);
    const completedQuestions = answeredQuestions.size;
    setProgress((completedQuestions / totalQuestions) * 100);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log(formData);
  };

  const handleSectionClick = (sectionIndex, subPageIndex = 0) => {
    setCurrentSection(sectionIndex);
    setCurrentSubPage(subPageIndex);
  };

  const toggleSidebar = () => {
    setSidebarVisible(!sidebarVisible);
  };

  const Separator = ({ title }) => (
    <div className="separator">
      <hr />
      {title && <h4>{title}</h4>}
    </div>
  );

  const renderInput = (question, questionIndex) => {
    if (!question) return null;

    return (
      <div className="input-container">
        {(() => {
          switch (question.title) {
            case 'Date of Birth':
              return (
                <div className="dob-inputs">
                  <select
                    name="dob-month"
                    value={formData['dob-month'] || ''}
                    onChange={handleChange}
                    className="styled-select dob-select"
                  >
                    <option value="" disabled>Month</option>
                    {Array.from({ length: 12 }, (_, i) => (i + 1).toString().padStart(2, '0')).map((month) => (
                      <option key={month} value={month}>
                        {month}
                      </option>
                    ))}
                  </select>
                  <span className="separator">-</span>
                  <select
                    name="dob-day"
                    value={formData['dob-day'] || ''}
                    onChange={handleChange}
                    className="styled-select dob-select"
                  >
                    <option value="" disabled>Day</option>
                    {Array.from({ length: 31 }, (_, i) => (i + 1).toString().padStart(2, '0')).map((day) => (
                      <option key={day} value={day}>
                        {day}
                      </option>
                    ))}
                  </select>
                  <span className="separator">-</span>
                  <select
                    name="dob-year"
                    value={formData['dob-year'] || ''}
                    onChange={handleChange}
                    className="styled-select dob-select"
                  >
                    <option value="" disabled>Year</option>
                    {Array.from({ length: 120 }, (_, i) => (new Date().getFullYear() - i).toString()).map((year) => (
                      <option key={year} value={year}>
                        {year}
                      </option>
                    ))}
                  </select>
                </div>
              );
            case 'Social Security Number':
              return (
                <div className="ssn-inputs">
                  <input
                    type="text"
                    name="ssn-part1"
                    placeholder="XXX"
                    value={formData['ssn-part1'] || ''}
                    onChange={handleChange}
                    className="ssn-part"
                    maxLength={3}
                    pattern="\d{3}" // Ensures the value is numeric
                  />
                  <span className="separator">-</span>
                  <input
                    type="text"
                    name="ssn-part2"
                    placeholder="XX"
                    value={formData['ssn-part2'] || ''}
                    onChange={handleChange}
                    className="ssn-part"
                    maxLength={2}
                    pattern="\d{2}" // Ensures the value is numeric
                  />
                  <span className="separator">-</span>
                  <input
                    type="text"
                    name="ssn-part3"
                    placeholder="XXXX"
                    value={formData['ssn-part3'] || ''}
                    onChange={handleChange}
                    className="ssn-part"
                    maxLength={4}
                    pattern="\d{4}" // Ensures the value is numeric
                  />
                </div>
              );
            case 'Citizenship':
              return (
                <select
                  name="citizenship"
                  value={formData['citizenship'] || ''}
                  onChange={handleChange}
                  className="styled-select"
                >
                  <option value="" disabled>Select Citizenship</option>
                  <option value="U.S. Citizen">U.S. Citizen</option>
                  <option value="Permanent Resident Alien">Permanent Resident Alien</option>
                  <option value="Non-Permanent Resident Alien">Non-Permanent Resident Alien</option>
                </select>
              );
            default:
              return (
                <input
                  type="text"
                  name={question.title}
                  value={formData[question.title] || ''}
                  onChange={handleChange}
                  className="styled-input"
                />
              );
          }
        })()}
      </div>
    );
  };

  const renderGroup = (group, groupIndex) => {
    return (
      <React.Fragment key={groupIndex}>
        <div className="form-wrapper">
          {group.questions.map((question, questionIndex) => {
            const layoutClass = layout-${question.layout.replace('%', '')};
            const questionId = ${groupIndex}-${questionIndex};
            return (
              <div key={questionIndex} className={question-container ${layoutClass}}>
                <div className="question-content">
                  <div className="title-group">
                    <div className="title-help-container">
                      <label className="question-title">{question.title}</label>
                      {question.help && (
                        <span 
                          className="help-icon" 
                          onClick={() => toggleHelp(questionId)}
                        >
                          ?
                        </span>
                      )}
                    </div>
                    {question.subtitle && (
                      <p className="question-subtitle">{question.subtitle}</p>
                    )}
                    {question.help && (
                      <div 
                        className={help-text ${isHelpVisible[questionId] ? 'visible' : ''}}
                      >
                        <p>{question.help}</p>
                      </div>
                    )}
                  </div>
                  {renderInput(question, questionIndex)}
                </div>
              </div>
            );
          })}
        </div>
  
        {/* Add separator after the third group */}
        {groupIndex === 2 && <Separator title="Current Address" />}
      </React.Fragment>
    );
  };

  const currentSubPageContent = sections[sectionNames[currentSection]][currentSubPage];

  return (
    <div className="App">
      <div className="main-content">
        <div className="form-section">
          <h1>Document Filler</h1>
          <button className="toggle-sidebar" onClick={toggleSidebar}>
            {sidebarVisible ? 'Hide Sidebar' : 'Show Sidebar'}
          </button>
          <div className="progress-bar" style={{ width: ${progress}% }}>
            {Math.round(progress)}%
          </div>
          <form onSubmit={handleSubmit}>
            <h2>{sectionTitles[sectionNames[currentSection]]}</h2>
            <h3>{currentSubPageContent.title}</h3>

            {currentSubPageContent.groups.map((group, groupIndex) => (
              renderGroup(group, groupIndex)
            ))}

            <div className="buttons">
              {(currentSection > 0 || currentSubPage > 0) && (
                <button type="button" onClick={handlePreviousSubPage}>
                  Back
                </button>
              )}
              <button type="button" onClick={handleNextSubPage}>
                Next
              </button>
            </div>
          </form>
        </div>

        {sidebarVisible && (
          <div className="sidebar">
            <ul>
              {sectionNames.map((section, sectionIndex) => (
                <li key={sectionIndex}>
                  <div
                    className={section-title ${sectionIndex === currentSection ? 'active' : ''}}
                    onClick={() => handleSectionClick(sectionIndex)}
                  >
                    {sectionIndex + 1}. {sectionTitles[section]}
                  </div>
                  <ul className="subpages-list">
                    {sections[section].map((subpage, subpageIndex) => (
                      <li
                        key={${sectionIndex}-${subpageIndex}}
                        className={sectionIndex === currentSection && subpageIndex === currentSubPage ? 'active-subpage' : ''}
                        onClick={() => handleSectionClick(sectionIndex, subpageIndex)}
                      >
                        {subpageIndex + 1}. {subpage.title}
                      </li>
                    ))}
                  </ul>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;

i wanna change something

body {
  font-family: Inter, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4;
  height: 100%;
}

html, body, #root {
  height: 100%;
}

.App {
  display: flex;
  height: 100%;
  width: 100%;
}

.main-content {
  display: flex;
  background-color: white;
  width: 100%;
  box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
  border-radius: 0;
}

.sidebar {
  flex: 1;
  background-color: #f9f9f9;
  padding: 1.25rem;
  border-left: 1px solid #ddd;
  height: 100%;
}

.progress-bar {
  height: 1.25rem;
  background-color: green;
  color: white;
  line-height: 1.25rem;
  text-align: center;
  border-radius: 0.3125rem;
  margin-bottom: 1.25rem;
}

.sidebar ul {
  list-style: none;
  padding: 0;
}

.sidebar li {
  padding: 0.625rem;
  border-bottom: 1px solid #ddd;
  cursor: pointer;
}

.sidebar li.active {
  font-weight: bold;
  color: rgb(0, 0, 0);
}

.section-title {
  cursor: pointer;
  padding: 0.625rem;
  font-weight: bold;
  border-bottom: 1px solid #ddd;
}

.section-title.active {
  color: rgb(0, 0, 0);
}

.subpages-list {
  list-style: none;
  padding-left: 1.25rem;
}

.subpages-list li {
  cursor: pointer;
  padding: 0.3125rem 0;
}

.subpages-list li.active-subpage {
  color: blue;
  font-weight: bold;
}

.ssn-inputs, .dob-inputs {
  display: flex;
  align-items: center;
  gap: 0.3125rem; /* 5px -> rem */
}

.ssn-part:nth-child(1) {
  width: 30%; /* For the first part, XXX */
}

.ssn-part:nth-child(3) {
  width: 25%; /* For the second part, XX */
}

.ssn-part:nth-child(5) {
  width: 40%; /* For the last part, XXXX */
}

.dob-month, .dob-day {
  width: 1.5rem; /* 35px -> rem */
}

.dob-year {
  width: 3rem; /* 50px -> rem */
}

.separator {
  font-size: 1.2rem;
}

.styled-select dob-select{
  width: 0.4rem; /* 80px -> rem */
}

/* .question-container {
  margin-bottom: 1rem; 
  padding: 1.2rem;
  background-color: #f6f6f6;
  border-radius: 0.5rem; 
  box-sizing: border-box;
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  gap: 0.625rem; 
  min-height: 150px; 
} */


/* .question-container {
  margin-bottom: 1rem;
  padding: 1.2rem;
  background-color: #f6f6f6;
  border-radius: 0.5rem;
  box-sizing: border-box;
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
  justify-content: space-between; 
  min-height: 150px; 
} */

.question-container {
  margin-bottom: 1rem;
  padding: 1.5rem;
  background-color: #f6f6f6;
  border-radius: 0.5rem;
  box-sizing: border-box;
  /* Initial state with no shadow */
  box-shadow: 0 0 0 rgba(0, 0, 0, 0);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  min-height: 150px;
  /* Add smooth transition for shadow */
  transition: box-shadow 0.3s ease-in-out;
}

.question-container:hover {
  /* Add shadow on hover */
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.2);
}



/* .question-content {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  justify-content: space-between;
  gap: 2rem; 
} */


.question-content {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%; /* Make it take full height of the container */
}


.form-wrapper {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem; /* 10px -> rem */
  margin-bottom: 1.25rem;
  justify-content: flex-end;
}

.layout-25 {
  flex: 1 1 calc(25% - 0.625rem); /* Updated gap calculation */
  min-width: 12.5rem; /* 200px -> rem */
}

.layout-33 {
  flex: 1 1;
  min-width: 15.625rem; /* 250px -> rem */
}

.layout-50 {
  flex: 1 1 calc(50% - 0.625rem);
  min-width: 18.75rem; /* 300px -> rem */
}

.layout-75 {
  flex: 1 1 calc(75% - 0.625rem);
  min-width: 25rem; /* 400px -> rem */
}

.layout-100 {
  flex: 1 1 100%;
}


.question-title {
  font-weight: bold;
  margin-bottom: 0.3125rem;
  display: block;
}

.question-subtitle {
  color: #666;
  font-size: 0.9rem;
  margin-bottom: 0.5rem;
  margin-top: 0;
}

@media (max-width: 768px) {
  .layout-25, .layout-33, .layout-50, .layout-75 {
    flex: 1 1 100%;
  }
}

/* input[type="text"], input[type="password"], input[type="email"], input[type="number"] {
  width: 90%; 
  padding: 0.625rem 1rem; 
  margin: 0.5rem 0; 
  border: 1.5px solid #ddd;
  border-radius: 1.875rem;
  background-color: #f9f9f9;
  font-size: 1rem;
  color: #333;
  box-shadow: 0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.1); 
  outline: none;
  transition: all 0.3s ease;
} 

*/

/* input[type="text"], select {
  font-family: 'Inter', sans-serif;
  font-size: 1rem;
  width: 90%; 
  padding: 0.625rem 1rem;
  margin: 0; 
  border: 1.5px solid #ddd;
  border-radius: 1.875rem;
  background-color: #f9f9f9;
  box-shadow: 0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
} */

input[type="text"], select {
  font-family: 'Inter', sans-serif;
  font-size: 1rem;
  width: 100%; /* Full width of the container */
  padding: 0.625rem 1rem; /* Consistent padding on both sides */
  margin: 0; /* No extra margin */
  border: 1.5px solid #ddd;
  border-radius: 1.875rem;
  background-color: #f9f9f9;
  box-shadow: 0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  box-sizing: border-box; /* Include padding and borders in the width calculation */
}


/* Hover effect */
input[type="text"]:hover, input[type="password"]:hover, input[type="email"]:hover, input[type="number"]:hover {
  border-color: #bbb;
  box-shadow: 0 0.0625rem 0.25rem rgba(0, 0, 0, 0.15);
}

/* Focus effect */
input[type="text"]:focus, input[type="password"]:focus, input[type="email"]:focus, input[type="number"]:focus {
  border-color: #4A90E2;
  box-shadow: 0 0 0.375rem rgba(74, 144, 226, 0.4);
}

/* Styling the select dropdown to match the other inputs */
.styled-select {
  width: 98%; /* Matches input width */
  padding: 0.625rem 1rem; /* Consistent padding with text input */
  border: 1.5px solid #ddd;
  border-radius: 1.875rem; /* Rounded, pill-like shape */
  background-color: #f9f9f9;
  font-size: 1rem;
  color: #333;
  box-shadow: 0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.1);
  outline: none;
  transition: all 0.3s ease;
  appearance: none; /* Removes the default select styling for a more custom look */
}

/* Hover effect for select */
.styled-select:hover {
  border-color: #bbb;
  box-shadow: 0 0.0625rem 0.25rem rgba(0, 0, 0, 0.15);
}

/* Focus effect for select */
.styled-select:focus {
  border-color: #4A90E2;
  box-shadow: 0 0 0.375rem rgba(74, 144, 226, 0.4);
}

/* Styling the date picker to match the other inputs */
.styled-date {
  width: 95%; /* Matches input width */
  padding: 0.625rem 1rem; /* Consistent padding with text input */
  margin: 0.5rem 0;
  border: 1.5px solid #ddd;
  border-radius: 1.875rem; /* Rounded, pill-like shape */
  background-color: #f9f9f9;
  font-size: 1rem;
  color: #333;
  box-shadow: 0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.1);
  outline: none;
  transition: all 0.3s ease;
  appearance: none; /* Removes default browser appearance */
  font-family: 'Times New Roman', Times, serif; /* Setting the font to Times New Roman */
  align-self: flex-end; /* Align input at the bottom */
}

/* Hover effect for date picker */
.styled-date:hover {
  border-color: #bbb;
  box-shadow: 0 0.0625rem 0.25rem rgba(0, 0, 0, 0.15);
}

/* Focus effect for date picker */
.styled-date:focus {
  border-color: #4A90E2;
  box-shadow: 0 0 0.375rem rgba(74, 144, 226, 0.4);
}

/* Calendar button styling (works in some browsers) */
input[type="date"]::-webkit-calendar-picker-indicator {
  color: #333;
  font-family: 'Times New Roman', Times, serif; /* Attempts to set the font */
}

body {
  font-family: Inter, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4;
  height: 100%;
}

html, body, #root {
  height: 100%;
}

.App {
  display: flex;
  height: 100%;
  width: 100%;
}

.main-content {
  display: flex;
  background-color: white;
  width: 100%;
  box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
  border-radius: 0;
}

/* Toggle button for sidebar */
.toggle-sidebar {
  background-color: #4A90E2;
  color: white;
  border: none;
  padding: 0.75rem 1.25rem;
  margin-bottom: 1rem;
  cursor: pointer;
  border-radius: 0.375rem;
  font-size: 1rem;
}

.toggle-sidebar:hover {
  background-color: #357ABD;
}

.form-section {
  flex: 3;
  padding: 2.5rem;
  overflow-y: auto;
}

.sidebar {
  flex: 1;
  background-color: #f9f9f9;
  padding: 1.25rem;
  border-left: 1px solid #ddd;
  height: 100%;
}

.progress-bar {
  height: 1.25rem;
  background-color: green;
  color: white;
  line-height: 1.25rem;
  text-align: center;
  border-radius: 0.3125rem;
  margin-bottom: 1.25rem;
}

.sidebar ul {
  list-style: none;
  padding: 0;
}

.sidebar li {
  padding: 0.625rem;
  border-bottom: 1px solid #ddd;
  cursor: pointer;
}

.sidebar li.active {
  font-weight: bold;
  color: rgb(0, 0, 0);
}

.section-title {
  cursor: pointer;
  padding: 0.625rem;
  font-weight: bold;
  border-bottom: 1px solid #ddd;
}

.section-title.active {
  color: rgb(0, 0, 0);
}

.subpages-list {
  list-style: none;
  padding-left: 1.25rem;
}

.subpages-list li {
  cursor: pointer;
  padding: 0.3125rem 0;
}

.subpages-list li.active-subpage {
  color: blue;
  font-weight: bold;
}

/* .title-group {
  display: flex;
  flex-direction: column;
  margin-bottom: 10px; 
} */

.title-group {
  display: flex;
  flex-direction: column;
}

.question-title {
  font-weight: bold;
  margin-bottom: 0.3125rem;
}

.question-subtitle {
  color: #666;
  font-size: 0.9rem;
  margin-top: 0;
  margin-bottom: 0.5rem;
}

.custom-dropdown {
  position: relative;
  display: inline-block;
  width: 100%;
  font-family: 'Inter', sans-serif;
}

.dropdown-label {
  padding: 0.625rem 1rem;
  border: 1.5px solid #ddd;
  border-radius: 1.875rem;
  background-color: #f9f9f9;
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: pointer;
}

.dropdown-selected {
  font-weight: bold;
}

.dropdown-options {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background-color: white;
  border: 1.5px solid #ddd;
  border-radius: 0.375rem;
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.1);
  z-index: 10;
  display: none; /* Hide by default, show when clicked */
}

.custom-dropdown:hover .dropdown-options {
  display: block; /* Show dropdown when hovering */
}

.dropdown-option {
  padding: 0.625rem 1rem;
  cursor: pointer;
}

.dropdown-option p {
  font-size: 0.85rem;
  color: #666;
}

.dropdown-option:hover {
  background-color: #f0f0f0;
}

.separator {
  margin: 20px 0;
}

.separator h4 {
  margin-bottom: 10px;
  font-size: 1.2em;
  font-weight: bold;
}

.separator hr {
  border: none;
  border-top: 1px solid #ccc;
  margin-top: 2rem;
  /* margin: 0 auto; */
}

.help-icon {
  margin-left: 8px;
  cursor: pointer;
  font-size: 1rem;
  color: #4A90E2;
  transition: color 0.3s ease;
}

.help-icon:hover {
  color: #357ABD;
}

.help-text {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease;
  padding-left: 1rem;
  color: #666;
}

.help-text.visible {
  max-height: 100px; /* Adjust as needed based on content length */
}

i think i want this to instead of like sliding down and like the help button creating a slide down effect, maybe create the following, let's create some text that says "Need help?" maybe underlined, if hovered on, it opens up like a small box that appears to the side of the section if u click it maybe it opens permentantly and then u have to like close it or click to the side to go back